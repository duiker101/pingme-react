{"version":3,"sources":["res/github.svg","registerServiceWorker.js","components/search/countries.js","Apis.js","components/search/search_input.js","components/search/search.js","components/nav.js","components/footer.js","components/errors.js","components/monitor.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Countries","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeCountry","country","toggleExpansion","onChange","setState","expanded","expandedClass","currentCountryClass","code","currentCountry","countries","_this2","react_default","a","createElement","className","concat","map","key","onClick","Component","ApiError","m","Error","Apis","response","ok","statusText","name","fetch","handleErrors","r","json","data","error_code","playerId","SearchInput","submitSearch","filterName","input","value","keyPress","e","replace","length","showError","onSearch","Fragment","ref","onKeyPress","type","placeholder","autoComplete","autoCorrect","autoCapitalize","spellCheck","loading","index_es","icon","react_loader_spinner_default","color","height","width","cl","Search","toggleCountryExpansion","countrySelector","onCountryChange","_paq","push","fetchPlayer","setLoading","getPlayer","player","addPlayer","message","onError","search_search_input","search_countries","c","Nav","href","src","Logo","alt","Footer","Errors","visible","nextProps","MonitorView","setHover","hover","hovering","profileIcon","version","monitor","profileIconId","gameTime","game","gameStartTime","diff","Date","getTime","minutes","parseInt","seconds","time","timer","setTimeout","gameMode","id","gameQueueConfigId","modes","420","440","100","450","stop","onMouseEnter","onMouseLeave","champion","_this3","refs","content","classList","remove","clearTimeout","App","findGame","getGame","addMonitor","champions","getChampionId","monitors","order","scheduleUpdate","updateGame","objectSpread","defineProperty","finishedMonitor","Notification","body","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","participants","Symbol","iterator","next","done","summonerId","championId","err","return","components_nav","wrapperClass","components_errors","search_search","values","sort","b","src_components_monitor","components_footer","getVersions","getChampions","permission","requestPermission","keys","library","add","faSearch","faTimes","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.19df12a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.08a277a2.svg\";","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './countries.css'\r\n\r\n/**\r\n * Dialog to select the country in which to search\r\n */\r\nclass Countries extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.countries = [\"EUW1\", \"EUN1\", \"NA1\", \"KR\", \"OC1\", \"BR1\", \"JP1\", \"TR1\", \"RU\", \"LA1\", \"LA2\"];\r\n        this.state = {expanded: false};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className={`countries ${this.expandedClass()}`}>\r\n                {\r\n                    this.countries.map((code) =>\r\n                        <div\r\n                            key={code}\r\n                            onClick={() => this.changeCountry(code)}\r\n                            className={`country ${this.currentCountryClass(code)}`}>\r\n                            {code}\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onChange(this.countries[0]);\r\n    }\r\n\r\n    changeCountry = (country) => {\r\n        this.toggleExpansion();\r\n        this.props.onChange(country);\r\n    };\r\n\r\n    toggleExpansion = () => {\r\n        this.setState({expanded: !this.state.expanded});\r\n    };\r\n\r\n    expandedClass = () => {\r\n        return this.state.expanded ? \"expanded\" : \"\";\r\n    };\r\n\r\n    currentCountryClass = (code) => {\r\n        return code === this.props.currentCountry ? \"current\" : \"\";\r\n    }\r\n}\r\n\r\nCountries.propTypes = {\r\n    currentCountry: PropTypes.string,\r\n    onChange: PropTypes.func\r\n};\r\n\r\nexport default Countries;","/**\r\n * Class to wrap error messages and HTTP error codes\r\n */\r\nclass ApiError extends Error {\r\n    constructor(code, m) {\r\n        super(m);\r\n        this.code = code;\r\n    }\r\n}\r\n\r\nclass Apis {\r\n    /**\r\n     * Classic catch of errors from fetch(). fetch() doesn't trigger a catch on code != 200.\r\n     * @param response\r\n     * @returns {{ok}|Object}\r\n     */\r\n    static handleErrors(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response;\r\n    };\r\n\r\n    static getPlayer(name,country) {\r\n        return fetch(`https://api.riftkit.net/api/${country}/summoner/by-name/${name}`)\r\n            .then(this.handleErrors)\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                if (data.error_code === 404) {\r\n                    throw new ApiError(data.error_code, 'Player not found');\r\n                } else if (data.error_code > 0) {\r\n                    throw new ApiError(data.error_code, 'Error finding player');\r\n                }\r\n                return data;\r\n            })\r\n    }\r\n\r\n    static getGame(playerId,country) {\r\n        return fetch(`https://api.riftkit.net/api/${country}/current_game/${playerId}`)\r\n            .then(this.handleErrors)\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                if (data.error_code === 404) {\r\n                    throw new ApiError(data.error_code, 'Player not in game');\r\n                } else if (data.error_code > 0) {\r\n                    throw new ApiError(data.error_code, 'Error retrieving game');\r\n                }\r\n                return data;\r\n            })\r\n    }\r\n\r\n    static getChampions(country) {\r\n        return fetch(`https://api.riftkit.net/api/${country}/champions/small`)\r\n            .then(this.handleErrors)\r\n            .then(r => r.json())\r\n    }\r\n\r\n    static getVersions(country) {\r\n        return fetch(`https://api.riftkit.net/api/${country}/versions`)\r\n            .then(this.handleErrors)\r\n            .then(r => r.json())\r\n    }\r\n}\r\n\r\n\r\nexport {Apis, ApiError};\r\n","import React, {Component} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport Loader from 'react-loader-spinner'\r\nimport PropTypes from 'prop-types';\r\nimport './search_input.css'\r\n\r\nclass SearchInput extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <input ref={e => this.input = e}\r\n                       onKeyPress={this.keyPress}\r\n                       type=\"text\"\r\n                       placeholder=\"Player Name\"\r\n                       autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\"/>\r\n\r\n                <div className=\"submit\">\r\n                    {!this.props.loading &&\r\n                        <span onClick={this.submitSearch}>\r\n                            <FontAwesomeIcon icon=\"search\" className={`button`}/>\r\n                        </span>\r\n                    }\r\n                    {this.props.loading &&\r\n                        <div className={`loader`}>\r\n                            <Loader type=\"Puff\" color=\"#555\" height=\"40\" width=\"30\" cl/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    submitSearch = () => {\r\n        this.filterName(this.input.value);\r\n    };\r\n\r\n    /**\r\n     * If Enter pressed act as if the user clicked the search button\r\n     * @param e\r\n     */\r\n    keyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.filterName(this.input.value);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Return a name as API compatible(remove spaces)\r\n     * TODO also encode funky chars\r\n     * @param value\r\n     */\r\n    filterName = (value) => {\r\n        let name = value.replace(/\\s/g, \"\");\r\n        if (name.length <= 0) {\r\n            this.props.showError(\"Name not valid\");\r\n            return;\r\n        }\r\n        this.props.onSearch(name)\r\n    };\r\n}\r\n\r\nSearchInput.propTypes = {\r\n    loading: PropTypes.bool,\r\n    onSearch: PropTypes.func\r\n};\r\n\r\nexport default SearchInput;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Countries from \"./countries\";\r\nimport {Apis} from \"../../Apis\";\r\nimport SearchInput from \"./search_input\";\r\n\r\nimport './search.css'\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {currentCountry: ''}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search\">\r\n\r\n                <SearchInput onSearch={this.fetchPlayer} loading={this.props.loading}/>\r\n\r\n                <button onClick={this.toggleCountryExpansion} className=\"region\">{this.state.currentCountry}</button>\r\n\r\n                <Countries\r\n                    ref={c => this.countrySelector = c}\r\n                    currentCountry={this.state.currentCountry}\r\n                    onChange={this.onCountryChange}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toggleCountryExpansion = () => {\r\n        this.countrySelector.toggleExpansion();\r\n    };\r\n\r\n    onCountryChange = (country) => {\r\n        this.setState({currentCountry: country});\r\n        if(window._paq)\r\n            window._paq.push(['trackEvent', 'Country', 'Change', `Country - ${country}`]);\r\n    };\r\n\r\n    fetchPlayer = (name) => {\r\n        // todo check player already added\r\n        if(window._paq)\r\n            window._paq.push(['trackEvent', 'Search', 'Player', `Country - ${this.state.currentCountry}`]);\r\n\r\n        this.props.setLoading(true);\r\n\r\n        Apis.getPlayer(name,this.state.currentCountry)\r\n            .then(player => {\r\n                this.props.addPlayer(player,this.state.currentCountry);\r\n            })\r\n            .catch(error => this.showError(error.message))\r\n    };\r\n\r\n    showError = (message) => {\r\n        this.props.setLoading(false);\r\n        this.props.onError(message);\r\n    }\r\n}\r\n\r\nSearch.propTypes = {\r\n    loading: PropTypes.bool,\r\n\r\n    addPlayer: PropTypes.func,\r\n    setLoading: PropTypes.func,\r\n    onError: PropTypes.func\r\n};\r\n\r\nexport default Search;","import React, {Component} from 'react';\r\nimport './nav.css'\r\nimport Logo from '../res/github.svg'\r\n\r\nclass Nav extends Component {\r\n    render() {\r\n        return (<nav>\r\n            <a href=\"https://riftkit.net\">Home</a>\r\n            <a href=\"https://pingme.riftkit.net/\">Ping Me</a>\r\n            <a href=\"https://map.riftkit.net\">LoL Planner</a>\r\n            <a href=\"https://riftkit.net/about\">About</a>\r\n            <a href=\"https://github.com/duiker101/pingme-react\">\r\n                <img src={Logo} alt={'GitHub logo'}/>\r\n            </a>\r\n        </nav>);\r\n    }\r\n}\r\n\r\nexport default Nav;\r\n","import React, {Component} from 'react';\r\nimport './footer.css'\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (<footer>\r\n            Ping Me isn't endorsed by Riot Games and doesn't reflect the views or opinions of Riot Games or anyone\r\n            officially involved in producing or managing League of Legends. League of Legends and Riot Games are\r\n            trademarks or registered trademarks of Riot Games, Inc. League of Legends © Riot Games, Inc.\r\n        </footer>);\r\n    }\r\n\r\n}\r\n\r\nexport default Footer;\r\n","import React, {Component} from 'react';\r\nimport './errors.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Errors extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {visible: false}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"errors\">\r\n                <div className={`error ${this.state.visible ? 'visible' : ''}`}>{this.props.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (!nextProps.message || nextProps.length === 0){\r\n            this.setState({visible: false});\r\n            return;\r\n        }\r\n        console.log(nextProps);\r\n\r\n        this.setState({visible: true});\r\n    }\r\n}\r\n\r\nErrors.propTypes = {\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default Errors;","import PropTypes from 'prop-types';\r\nimport React, {Component} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nimport './monitor.css'\r\n\r\nclass MonitorView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**\r\n             * When hovering the component we want to show the x to remove the monitor\r\n             */\r\n            hovering: false,\r\n            time: ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref=\"content\" className=\"monitor hidden\" onMouseEnter={() => this.setHover(true)}\r\n                 onMouseLeave={() => this.setHover(false)}>\r\n                <img src={this.profileIcon()}/>\r\n                <div className=\"title\">\r\n                    {this.props.monitor.player.name}({this.props.monitor.champion.name}){this.gameMode()}\r\n                </div>\r\n                <div className=\"time\">{this.state.time}</div>\r\n                <span onClick={this.stop}>\r\n                <FontAwesomeIcon icon=\"times\" className={this.state.hovering ? 'visible' : ''}/>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.refs.content.classList.remove(\"hidden\");\r\n        }, 50);\r\n\r\n        if (window._paq)\r\n            window._paq.push(['trackEvent', 'Monitor', 'Start']);\r\n        this.gameTime();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timer);\r\n    }\r\n\r\n\r\n    setHover = (hover) => {\r\n        this.setState({hovering: hover})\r\n    };\r\n\r\n    profileIcon = () => {\r\n        let baseUrl = 'http://ddragon.leagueoflegends.com/cdn/';\r\n        return `${baseUrl}${this.props.version}/img/profileicon/${this.props.monitor.player.profileIconId}.png`\r\n    };\r\n\r\n    /**\r\n     * get the duration of the game as human-readable string. gameStartTime CAN BE 0\r\n     */\r\n    gameTime = () => {\r\n        let time = this.props.monitor.game.gameStartTime;\r\n        if (time > 0) {\r\n            let diff = ((new Date().getTime()) - this.props.monitor.game.gameStartTime) / 1000;\r\n            let minutes = parseInt(diff / 60);\r\n            let seconds = parseInt(diff - minutes * 60);\r\n            seconds = (seconds + \"\").length < 2 ? '0' + seconds : seconds;\r\n            this.setState({time: `${minutes}:${seconds}`});\r\n        } else {\r\n            this.setState({time: `Starting...`});\r\n        }\r\n        this.timer = setTimeout(this.gameTime, 10);\r\n    };\r\n\r\n    /**\r\n     * Get the game mode for the game but works only for some game modes. Should still cover 99% of the games.\r\n     * @returns {string}\r\n     */\r\n    gameMode = () => {\r\n        let id = this.props.monitor.game.gameQueueConfigId;\r\n        let modes = {\r\n            420: 'Ranked Solo',\r\n            440: 'Ranked Flex',\r\n            100: 'ARAM',\r\n            450: 'ARAM'\r\n        };\r\n\r\n        if (id in modes)\r\n            return ` - ${modes[id]}`;\r\n        else return ''\r\n    };\r\n\r\n    stop = () => {\r\n        if (window._paq)\r\n            window._paq.push(['trackEvent', 'Monitor', 'Stop']);\r\n        this.props.stop(this.props.monitor.player.id)\r\n    };\r\n}\r\n\r\nMonitorView.propTypes = {\r\n    version: PropTypes.string,\r\n    champion: PropTypes.object,\r\n    player: PropTypes.object,\r\n    game: PropTypes.object\r\n};\r\n\r\nexport default MonitorView;","import React, {Component} from 'react';\r\nimport Search from \"./components/search/search\";\r\nimport Nav from \"./components/nav\";\r\nimport Footer from \"./components/footer\";\r\nimport Errors from \"./components/errors\";\r\nimport MonitorView from \"./components/monitor\";\r\nimport {Apis} from \"./Apis\";\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /**\r\n             * Current players being monitored. Hashmap where the key is the PlayerId\r\n             */\r\n            monitors: {},\r\n            /**\r\n             * Current error message\r\n             */\r\n            error: '',\r\n            /**\r\n             * if it's currently loading, triggered only on first search of a game\r\n             */\r\n            loading: false,\r\n            /**\r\n             * Incremental, increased every time we add a new monitor to keep sort of them\r\n             * TODO, doesn't really need to be a state\r\n             */\r\n            order: 0};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main>\r\n                <Nav/>\r\n                <section>\r\n                    <div className={`wrapper ${this.wrapperClass()}`}>\r\n                        <Errors message={this.state.error}/>\r\n\r\n                        <Search\r\n                            loading={this.state.loading}\r\n                            setLoading={this.setLoading}\r\n                            onError={this.showError}\r\n                            addPlayer={this.findGame}/>\r\n\r\n                        <div>\r\n                            {Object.values(this.state.monitors)\r\n                                .sort((a, b) => a.order - b.order)\r\n                                .map(m =>\r\n                                    <MonitorView key={m.player.id}\r\n                                                 monitor={m}\r\n                                                 version={this.version}\r\n                                                 stop={this.stop}\r\n                                    />\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <Footer/>\r\n            </main>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * On mount of the component we gather from the API the version, for the profile icon and the list of champions\r\n     * We also ask the user for notification permission if we don't have it already\r\n     */\r\n    componentDidMount() {\r\n        Apis.getVersions('euw1').then(data => this.version = data['v']);\r\n        Apis.getChampions('euw1').then(data => this.champions = data);\r\n\r\n        if (Notification.permission === 'default') {\r\n            Notification.requestPermission();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find if a player is in a game, if so add it to the monitors\r\n     * @param player object form the API\r\n     * @param country\r\n     */\r\n    findGame = (player,country) => {\r\n        Apis.getGame(player.id,country)\r\n            .then(game => {\r\n                this.addMonitor(player,country, game)\r\n            })\r\n            .catch(error => this.showError(error.message))\r\n    };\r\n\r\n    /**\r\n     * Add a player, it's champion and a game to the monitors in the state\r\n     * @param player\r\n     * @param country\r\n     * @param game\r\n     */\r\n    addMonitor = (player,country, game) => {\r\n        let champion = this.champions[this.getChampionId(player, game)];\r\n        let monitors = this.state.monitors;\r\n        monitors[player.id] = {player: player, game: game, champion: champion, order: this.state.order};\r\n        this.setState({monitors: monitors, loading: false, order: this.state.order + 1});\r\n        this.scheduleUpdate(player.id, country);\r\n    };\r\n\r\n    /**\r\n     * Update the game in a monitor for a specific player\r\n     * @param playerId player who's game we want to update\r\n     * @param country\r\n     */\r\n    updateGame = (playerId, country) => {\r\n        if (!(playerId in this.state.monitors))\r\n            return;\r\n        Apis.getGame(playerId,country)\r\n            .then(game => {\r\n                if (!(playerId in this.state.monitors))\r\n                    return;\r\n                let monitor = this.state.monitors[playerId];\r\n                monitor.game = game;\r\n                this.setState({monitors: {...this.state.monitors, [playerId]: monitor}});\r\n                this.scheduleUpdate(playerId,country)\r\n            })\r\n            .catch(error => {\r\n                    if (error.code === 404)\r\n                        this.finishedMonitor(playerId);\r\n                    else\r\n                        this.showError(error.message)\r\n                }\r\n            )\r\n    };\r\n\r\n    /**\r\n     * start a timer to update a game in 10010ms. This is because the server has a cache of 10s on the game page so\r\n     * we want to be sure we will get a new page. with page load times we probably would, but no one is going to notice\r\n     * 10ms more\r\n     * @param playerId\r\n     */\r\n    scheduleUpdate = (playerId,country) => {\r\n        setTimeout(() => this.updateGame(playerId,country), 10010);\r\n    };\r\n\r\n    /**\r\n     * Stop the monitor and notify the browser of a finished game\r\n     * @param playerId\r\n     */\r\n    finishedMonitor = (playerId) => {\r\n        let player = this.state.monitors[playerId].player;\r\n        this.stop(playerId);\r\n\r\n        if(window._paq)\r\n            window._paq.push(['trackEvent', 'Notification', 'Display']);\r\n        let notification = new Notification(`${player.name} finished playing`, {\r\n            icon: 'https://i.imgur.com/Tmc5u7u.png',\r\n            body: \"Go fuck some shit up!\"\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Given a player and his game, find what champion he is playing and return it's id\r\n     * @param player api object\r\n     * @param game api object from the spectator api\r\n     * @returns {number} champion id\r\n     */\r\n    getChampionId = (player, game) => {\r\n        for (let p of game.participants) {\r\n            if (p.summonerId === player.id)\r\n                return p.championId;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Remove a monitor from the state\r\n     * @param playerId\r\n     */\r\n    stop = (playerId) => {\r\n        delete this.state.monitors[playerId];\r\n        this.setState({monitors: this.state.monitors});\r\n    };\r\n\r\n    setLoading = (loading) => {\r\n        this.setState({loading: loading});\r\n    };\r\n\r\n    /**\r\n     * Display an error and start a timer for 3s, after which, hide the error\r\n     * @param message\r\n     */\r\n    showError = (message) => {\r\n        this.setState({error: message, loading: false});\r\n\r\n        // TODO, use a isErrorVisible instead of clearing the error message\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(() => {\r\n            this.setState({error: ''});\r\n        }, 3000)\r\n    };\r\n\r\n    wrapperClass() {\r\n        return Object.keys(this.state.monitors).length > 0 ? \"expanded\" : \"\";\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faSearch);\r\nlibrary.add(faTimes);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}